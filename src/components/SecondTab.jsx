// import {useEffect} from "react";

import Table from "./Table";
import Form from 'react-bootstrap/Form';
import React from 'react';
import InputGroup from 'react-bootstrap/InputGroup';
import Button from 'react-bootstrap/Button';
import {decode} from '../helper/Helper'
import axios from 'axios';
import { useState, useEffect } from "react";
const SecondTab = ({ clean }) => {


    const [tableData2, setTableData2] = useState(() => {
        // getting stored value
        const saved = sessionStorage.getItem("td2");
        const initialValue = JSON.parse(saved);
        return initialValue || [];
    });


    useEffect(() => {
        sessionStorage.setItem("td2", JSON.stringify(tableData2));
    }, [tableData2]);

    const handleClick = () => {
        console.log("button clicked");
        axios.get('https://reqres.in/api/users?page=2')
            .then(res => {
                //modify here
                let decoded_message = decode(dummyMessages,dummyId)
                setTableData2((prevData) => [...prevData,{
                    id: dummyId.slice(0,10).join(),
                    content: decoded_message,
                    createdAt: Date.now()
                }])
            })
            .catch(error => {setErrorMessage("Network Error: Receiving message failed.")});
    }
    const [messageId,setMessageId] = React.useState("");
    const [errorMessage,setErrorMessage] = React.useState("");
    //const [tableData2,setTableData2] = React.useState([


    const dummyMessages = [[0,0,0,0,0,0,0,0,0,2,0,0,2,-2,0,2,2,-2,0,0,0,0,2,-2,0,-2,2,0,0,0,0,-2,0,2,-2,0,0,0,-2,0,0,2,2,0,0,0,-2,2,0,2,2,0,0,0,0,-2,0,-2,2,0,0,0,-2,0,0,-2,2,0,0,0,2,2,0,2,2,0,0,0,0,-2,0,2,2,0,0,0,2,0,0,2,2,0,0,0,-2,-2,0,2,-2,0,0,0,0,-2,0,2,2,0,0,0,2,0,0,-2,-2,0,0,0,-2,2,0,-2,2,0,0,0,0,2,0,-2,-2,0,0,0,2,0,0,2,-2,0,0,0,-2,-2,0,-2,-2,0,0,0,0,2,0,-2,-2,0,0,0,-2,0,0,-2,2,0,0,0,-2,-2,0,2,2,0,0,0,0,-2,0,-2,2,0,0,0,-2,0,0,-2,-2,0,0,0,2,2,0,2,2,0,0,0,0,-2,0,-2,2,0,0,0,-2,0,0,-2,2,0,0,0,2,2,0,2,-2,0,0,0,0,-2,0,2,-2,0,0,0,2,0,0,2,-2,0,0,0,2,-2,2,2,-2,-2,2,-2,2,2,2,2,2,-2,2,2,2,2,2,2,-2,-2,2,2,2,-2,2,-2,-2,-2,-2,-2,2,2,2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,2,2,-2,-2,-2,2,-2,2,2,-2,-2,2,-2,2,2,-2,-2,-2,-2,-2,-2,2,-2,-2,2,2,2,-2,-2,-2,2,2,-2,2,-2,-2,2,-2,2,2,2,-2,-2,2,-2,2,2,-2,2,2,-2,2,2,2,-2,-2,-2,2,2,-2,-2,2,-2,-2,2,-2,-2,2,2,2,-2,2,-2,-2,-2,-2,-2,-2,-2,2,-2,-2,-2,2,2,-2,-2,-2,2,2,2,2,-2,-2,2,-2,-2,-2,2,2,-2,-2,-2,-2,-2,2,-2,-2,-2,-2,2,2,2,-2,-2,2,-2,-2,-2,2,-2,-2,-2,2,-2,-2,2,-2,2,-2,2,-2,2,-2,-2,2,-2,-2,2,2,-2,-2,-2,-2,-2,2,-2,-2,2,-2,2,-2,-2,2,-2,2,2,2,2,-2,-2,-2,-2,2,2,-2,-2,2,2,2,-2,2,2,-2,2,-2,-2,2,2,-2,2,2,2,2,-2,-2,-2,2,2,-2,-2,2,2,-2,-2,-2,2,2,2,2,2,-2,2,2,2,-2,-2,2,2,2,2,2,2,2,2,-2,2,-2,-2,2,-2,-2,-2,-2,-2,2,2,-2,2,-2,2,-2,2,2,2,-2,2,-2,2,-2,2,2,2,2,2,-2,-2,2,2,2,-2,-2,-2,-2,2,2,-2,-2,2,-2,-2,2,2,2,2,2,2,-2,-2,2,2,2,-2,-2,2,2,2,2,-2,-2,2,2,2,-2,2,2,2,-2,-2,2,2,2,2,2,2,-2,-2,-2,2,2,2,2,2,2,-2,-2,2,-2,2,2,2,2,2,-2,2,2,2,-2,2,-2,-2,2,-2,2,2,2,-2,2,2,-2,2,2,2,-2,-2,-2,-2,2,2,2,2,-2,2,2,-2,-2,-2,2,2,-2,2,2,-2,2,2,-2,2,2,-2,2,2,2,-2,-2,2,2,2,-2,2,-2,2,2,2,-2,-2,2,2,2,-2,2,2,2,2,-2,-2,-2,2,-2,2,-2,2,2,2,2,-2,2,-2,2,2,-2,2,2,2,2,2,-2,-2,2,-2,-2,-2,2,2,-2,2,2,-2,2,2,-2,2,2,2,-2,2,-2,2,-2,2,2,2,-2,-2,2,-2,2,-2,2,2,-2,2,-2,-2,2,2,-2,2,-2,2,-2,2,2,2,-2,2,-2,2,2,-2,2,2,-2,-2,2,2,-2,2,-2,2,-2,2,-2,-2,-2,2,2,-2,-2,2,2,-2,2,2,-2,-2,2,2,-2,-2,-2,2,-2,2,-2,-2,2,2,2,-2,-2,2,2,2,2,-2,-2,2,2,-2,2,-2,2,2,2,-2,2,-2,2,2,2,2,2,2,2,2,-2,2,-2,2,2,-2,2,2,-2,-2,-2,-2,-2,-2,-2,2,2,2,-2,-2,2,-2,-2,-2,-2,2,2,-2,2,2,2,2,-2,2,2,2,-2,2,-2,2,2,-2,2,2,2,2,-2,-2,-2,2,-2,-2,-2,-2,-2,-2,-2,-2,2,-2,2,-2,-2,-2,2,2,2,2,2,2,-2,2,2,2,2,2,2,-2,-2,2,2,2,2,2,2,-2,-2,2,2,2,2,2,2,-2,-2,2,-2,-2,-2,2,-2,2,-2,2,-2,2,2,-2,2,-2,-2,2,2,-2,-2,2,-2,-2,-2,2,-2,-2,2,2,-2,-2,2,-2,2,2,-2,-2,-2,2,-2,-2,-2,2,2,2,2,2,-2,-2,-2,2,2,2,-2,2,2,2,-2,2,-2,2,-2,-2,-2,-2,-2,2,2,2,-2,2,-2,-2,-2,-2,2,2,-2,2,-2,-2,2,-2,2,2,2,2,2,2,2,2,-2,-2,2,-2,2,-2],[0,0,0,0,0,0,0,0,0,0,-2,2,2,-2,0,2,0,-2,0,0,0,2,2,0,0,0,0,2,0,-2,2,0,0,0,-2,0,0,-2,-2,0,0,0,2,-2,0,2,-2,0,0,0,0,-2,0,-2,2,0,0,0,2,0,0,-2,-2,0,0,0,2,-2,0,2,2,0,0,0,0,2,0,-2,2,0,0,0,2,0,0,2,2,0,0,0,2,-2,0,2,-2,0,0,0,0,2,0,2,2,0,0,0,2,0,0,-2,2,0,0,0,-2,-2,0,-2,-2,0,0,0,0,-2,0,-2,2,0,0,0,-2,0,0,-2,2,0,0,0,-2,-2,0,2,-2,0,0,0,0,2,0,2,2,0,0,0,-2,0,0,2,-2,0,0,0,2,-2,0,2,-2,0,0,0,0,2,0,-2,2,0,0,0,2,0,0,-2,-2,0,0,0,-2,2,0,-2,2,0,0,0,0,-2,0,2,2,0,0,0,2,0,0,2,-2,0,0,0,2,-2,0,2,2,0,0,0,0,-2,0,2,-2,0,0,0,-2,0,0,2,2,0,0,0,-2,-2,0,-2,2,0,0,0,0,-2,0,-2,2,0,0,0,2,0,0,2,2,0,0,0,-2,-2,0,2,2,0,0,0,0,-2,0,-2,2,0,0,0,-2,0,0,-2,-2,0,0,0,-2,2,0,-2,-2,0,0,0,0,2,0,-2,2,0,0,0,-2,0,0,-2,-2,0,0,0,-2,2,0,2,-2,0,0,0,0,-2,0,-2,-2,0,0,0,2,0,0,-2,2,0,0,0,-2,2,0,-2,2,0,0,0,0,-2,0,2,-2,0,0,0,-2,0,0,-2,2,0,0,0,2,-2,0,-2,-2,0,0,0,0,-2,0,-2,2,0,0,0,-2,0,0,2,2,0,0,0,-2,-2,0,2,2,0,0,0,0,-2,0,-2,-2,0,0,0,2,0,0,-2,2,0,0,0,2,-2,0,-2,2,0,0,0,0,2,0,2,-2,0,0,0,2,0,0,2,2,0,0,0,-2,-2,0,-2,-2,0,0,0,0,-2,0,-2,2,0,0,0,-2,0,0,-2,2,0,0,0,2,2,0,-2,2,0,0,0,0,-2,0,2,-2,0,0,0,2,0,0,-2,2,0,0,0,2,2,0,-2,-2,0,0,0,0,2,0,2,2,0,0,0,2,0,0,2,2,0,0,0,-2,2,0,-2,2,0,0,0,0,-2,0,2,-2,0,0,0,-2,0,0,2,-2,0,0,0,-2,2,0,2,2,0,0,0,0,2,0,-2,-2,0,0,0,2,0,0,2,-2,0,0,0,2,2,0,2,-2,0,0,0,0,-2,0,2,2,0,0,0,-2,0,0,2,-2,0,0,0,-2,-2,0,2,2,0,0,0,0,-2,0,2,2,0,0,0,2,0,0,2,-2,0,0,0,2,2,0,2,2,0,0,0,0,-2,0,-2,2,0,0,0,2,0,0,2,2,0,0,0,-2,-2,0,2,2,0,0,0,0,-2,0,-2,2,0,0,0,2,0,0,2,-2,0,0,0,2,2,0,-2,-2,0,0,0,0,2,0,2,2,0,0,0,2,0,0,-2,2,0,0,0,-2,-2,0,2,-2,0,0,0,0,2,0,-2,2,0,0,0,-2,0,0,2,2,0,0,0,2,-2,0,-2,2,0,0,0,0,-2,0,2,-2,0,0,0,-2,0,0,2,-2,0,0,0,-2,-2,0,-2,2,0,0,0,0,2,0,-2,2,0,0,0,-2,0,0,2,2,0,0,0,-2,2,0,-2,2,0,0,0,0,2,0,2,-2,0,0,0,-2,0,0,2,2,0,0,0,2,-2,0,2,-2,0,0,0,0,-2,0,2,-2,0,0,0,2,0,0,-2,-2,0,0,0,2,-2,0,2,2,0,0,0,0,2,0,-2,2,0,0,0,2,0,0,2,2,0,0,0,-2,2,0,-2,2,0,0,0,0,-2,0,-2,-2,0,0,0,-2,0,0,-2,-2,0,0,0,2,-2,0,2,2,0,0,0,0,2,0,2,-2,0,0,0,2,0,0,2,-2,0,0,0,-2,-2,0,-2,-2,0,0,0,0,-2,0,-2,-2,0,0,0,2,0,0,2,-2,0,0,0,2,2,0,-2,-2,0,0,0,0,2,0,-2,-2,0,0,0,2,0,0,-2,-2,0,0,0,-2,2,0,2,-2,0,0,0,0,-2,0,-2,-2,0,0,0,-2,0,0,-2,-2,0,0,0,2,2,0,-2,2,0,0,0,0,-2,0,2,-2,0,0,0,2,0,0,2,-2,0,0,0,2,2,0,2,2,0,0,0,0,2,0,-2,-2,0,0,0,2,0,0,2,-2,0,0,0,2,2,0,2,-2,0,0,0,0,2,0,2,2,0,0,0,-2,0,0,-2,2,0]];
    const dummyId = [-1,1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,-1,1,-1,1,1,-1,-1,-1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,1,-1,-1,1,-1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,-1,1,1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,1,1,1,1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,-1,1,-1,1,1,1,1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,-1,1,-1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,-1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,1,-1,1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,1,-1,-1,1,-1,1,1,1,-1,-1,1,-1,1,1,-1,1,1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,-1,1,1,1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,1,1,1,1,-1,-1,-1,-1,1,1,-1,-1,1,1,1,-1,1,1,-1,1,-1,-1,1,1,-1,1,1,1,1,-1,-1,-1,1,1,-1,-1,1,1,-1,-1,-1,1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,-1,1,-1,1,1,1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,-1,1,1,1,1,1,-1,1,1,1,-1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,1,1,1,1,-1,1,1,-1,-1,-1,1,1,-1,1,1,-1,1,1,-1,1,1,-1,1,1,1,-1,-1,1,1,1,-1,1,-1,1,1,1,-1,-1,1,1,1,-1,1,1,1,1,-1,-1,-1,1,-1,1,-1,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,-1,1,1,-1,1,1,1,-1,1,-1,1,-1,1,1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,-1,1,1,-1,1,1,-1,-1,1,1,-1,1,-1,1,-1,1,-1,-1,-1,1,1,-1,-1,1,1,-1,1,1,-1,-1,1,1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1,1,-1,1,1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,-1,1,1,1,1,-1,1,1,1,-1,1,-1,1,1,-1,1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,1,1,1,1,1,1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1,1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,1,-1,-1,-1,1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,1,1,-1,1,1,1,-1,1,-1,1,-1,-1,-1,-1,-1,1,1,1,-1,1,-1,-1,-1,-1,1,1,-1,1,-1,-1,1,-1,1,1,1,1,1,1,1,1,-1,-1,1,-1,1,-1];
    // useEffect(() => {
    //     if (clean) {
    //
    //     }
    // }, []);

    return (
        <div>

            <h4>Receive New Message</h4>

            <Form.Label>Message ID</Form.Label>
            <InputGroup className="mb-3">
                <Form.Control placeholder="Paste message ID here" aria-label="" value={messageId} onChange={e => setMessageId(e.target.value)}
                />
                <Button onClick={handleClick}>Receive</Button>
            </InputGroup>



            <h2 style={{ textAlign: 'center', margin: '0 auto', padding: '10px 10px 10px 10px' }}>Received Messages</h2>
            <Table data={tableData2} isSentTable={false}/>
        </div>
    );
};
export default SecondTab;